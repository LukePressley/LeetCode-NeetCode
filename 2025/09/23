********Merge Strings Alternately:*************************************************************************************************************************************************************************************************************************************************************************************************************************************************

You are given two strings, word1 and word2. Construct a new string by merging them in alternating order, starting with word1 â€” take one character from word1, then one from word2, and repeat this process.

If one string is longer than the other, append the remaining characters from the longer string to the end of the merged result.

Return the final merged string.

####Solution:####

class Solution:
    def mergeAlternately(self, word1: str, word2: str) -> str:
        result = []

        o = len(word1)
        p = len(word2)

        x = y = 0

        while x < o or y < p:
            if x < o:
                result.append(word1[x])
            if y < p:
                result.append(word2[y])

            x+=1
            y+=1

        return "".join(result)


********Group Anagrams:*************************************************************************************************************************************************************************************************************************************************************************************************************************************************

Given an array of strings strs, group all anagrams together into sublists. You may return the output in any order.

An anagram is a string that contains the exact same characters as another string, but the order of the characters can be different.

####Solution:####

class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        result = defaultdict(list)
        for s in strs:
            count = [0] * 26
            for c in s:
                count[ord(c)-ord("a")] +=1
            result[tuple(count)].append(s)
        return list(result.values())        


********Top K Frequent Elements:*************************************************************************************************************************************************************************************************************************************************************************************************************************************************

Given an integer array nums and an integer k, return the k most frequent elements within the array.

The test cases are generated such that the answer is always unique.

You may return the output in any order.
